version: "3.8"
services:
  proxy:
    image: martinjoo/posts-proxy:${IMAGE_TAG}
    command: sh -c "/usr/wait-for-it.sh nginx:80 -t 180 && /usr/wait-for-it.sh frontend:80 -t 180 && nginx -g \"daemon off;\""
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 10
        window: 15s
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 2m
    ports:
      - "80:80"
    depends_on:
      - frontend
      - nginx

  frontend:
    image: martinjoo/posts-frontend:${IMAGE_TAG}
    command: sh -c "/usr/wait-for-it.sh nginx:80 -t 120 && nginx -g \"daemon off;\""
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 15s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 15s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "frontend"
    logging:
      driver: fluentd
      options:
        tag: "frontend"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 1m30s
    depends_on:
      - nginx

  api:
    image: martinjoo/posts-api:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh mysql:3306 -t 60 && /usr/src/wait-for-it.sh redis:6379 -t 60 && php-fpm"
    deploy:
      replicas: 4
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 2
        delay: 10s
        failure_action: pause
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 2
        delay: 10s
        failure_action: pause
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "api"
    logging:
      driver: fluentd
      options:
        tag: "api"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "nc", "-zv", "localhost", "9000" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    environment:
      - APP_NAME=posts
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - LOG_CHANNEL=stack
      - LOG_LEVEL=error
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=posts
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=log
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=devops-with-laravel-storage
      - AWS_DEFAULT_REGION=us-east-1
      - FILESYSTEM_DISK=s3
      - ROLLBAR_TOKEN=${ROLLBAR_TOKEN}
    depends_on:
      - update
      - mysql
      - redis

  scheduler:
    image: martinjoo/posts-scheduler:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh mysql:3306 -t 60 && /usr/src/wait-for-it.sh redis:6379 -t 60 && /usr/src/scheduler.sh"
    deploy:
      replicas: 1
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 60s
        window: 30s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: pause
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "scheduler"
    logging:
      driver: fluentd
      options:
        tag: "scheduler"
        labels: "service_name"
    environment:
      - APP_NAME=posts
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - LOG_CHANNEL=stack
      - LOG_LEVEL=error
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=posts
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=log
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=devops-with-laravel-storage
      - AWS_DEFAULT_REGION=us-east-1
      - FILESYSTEM_DISK=s3
      - ROLLBAR_TOKEN=${ROLLBAR_TOKEN}
    depends_on:
      - update
      - mysql
      - redis

  worker:
    image: martinjoo/posts-worker:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh mysql:3306 -t 60 && /usr/src/wait-for-it.sh redis:6379 -t 60 && /usr/src/worker.sh"
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "worker"
    logging:
      driver: fluentd
      options:
        tag: "worker"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "php", "/usr/src/artisan", "queue:monitor", "default" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    environment:
      - APP_NAME=posts
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - LOG_CHANNEL=stack
      - LOG_LEVEL=error
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=posts
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=log
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=devops-with-laravel-storage
      - AWS_DEFAULT_REGION=us-east-1
      - FILESYSTEM_DISK=s3
      - ROLLBAR_TOKEN=${ROLLBAR_TOKEN}
    depends_on:
      - update
      - mysql
      - redis

  nginx:
    image: martinjoo/posts-nginx:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh api:9000 -t 120 && nginx -g \"daemon off;\""
    deploy:
      replicas: 2
      placement:
        constraints:
          - "node.labels.db!=true"
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 15s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "nginx"
    logging:
      driver: fluentd
      options:
        tag: "nginx"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/api/health-check" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 1m
    depends_on:
      - api

  mysql:
    image: martinjoo/posts-mysql:${IMAGE_TAG}
    deploy:
      placement:
        constraints:
          - "node.labels.db==true"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "mysql"
    logging:
      driver: fluentd
      options:
        tag: "mysql"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    volumes:
      - type: volume
        source: mysqldata
        target: /var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}

  redis:
    image: redis:7.0.11-alpine
    deploy:
      placement:
        constraints:
          - "node.labels.db==true"
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 60s
      update_config:
        parallelism: 1
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0
        order: stop-first
      rollback_config:
        parallelism: 1
        failure_action: rollback
        monitor: 30s
        max_failure_ratio: 0
        order: stop-first
    labels:
      service_name: "redis"
    logging:
      driver: fluentd
      options:
        tag: "redis"
        labels: "service_name"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    volumes:
      - type: volume
        source: redisdata
        target: /data

  health-check:
    image: martinjoo/posts-health-check:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh mysql:3306 -t 60 && /usr/src/wait-for-it.sh redis:6379 -t 60 && /usr/src/health-check.sh"
    deploy:
      mode: global
      restart_policy:
        condition: any
        delay: 60s
        window: 30s
    labels:
      service_name: "health-check"
    logging:
      driver: fluentd
      options:
        tag: "health-check"
        labels: "service_name"
    environment:
      - APP_NAME=posts
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - LOG_CHANNEL=stack
      - LOG_LEVEL=error
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=posts
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=log
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=devops-with-laravel-storage
      - AWS_DEFAULT_REGION=us-east-1
      - FILESYSTEM_DISK=s3
      - ROLLBAR_TOKEN=${ROLLBAR_TOKEN}
      - HEALTH_CHECK_EMAIL=${HEALTH_CHECK_EMAIL}
    depends_on:
      - update
      - mysql
      - redis

  update:
    image: martinjoo/posts-api:${IMAGE_TAG}
    command: sh -c "/usr/src/wait-for-it.sh mysql:3306 -t 60 && /usr/src/wait-for-it.sh redis:6379 -t 60 && /usr/src/update.sh"
    deploy:
      mode: replicated-job
    labels:
      service_name: "update"
    logging:
      driver: fluentd
      options:
        tag: "update"
        labels: "service_name"
    environment:
      - APP_NAME=posts
      - APP_ENV=production
      - APP_KEY=${APP_KEY}
      - APP_DEBUG=false
      - APP_URL=http://localhost:8000
      - LOG_CHANNEL=stack
      - LOG_LEVEL=error
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=posts
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - QUEUE_CONNECTION=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MAIL_MAILER=log
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=devops-with-laravel-storage
      - AWS_DEFAULT_REGION=us-east-1
      - FILESYSTEM_DISK=s3
      - ROLLBAR_TOKEN=${ROLLBAR_TOKEN}
    depends_on:
      - mysql
      - redis

volumes:
  mysqldata:
  redisdata:
